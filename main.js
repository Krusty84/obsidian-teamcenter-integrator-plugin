/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TeamcenterIntegratorPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian4 = require("obsidian");

// src/mainWindow.ts
var import_obsidian2 = require("obsidian");

// src/tcAPI.ts
var import_obsidian = require("obsidian");
var TeamcenterApi = class {
  constructor(settings) {
    this.jsessionId = null;
    this.settings = settings;
  }
  updateSettings(settings) {
    this.settings = settings;
  }
  // @ts-ignore
  async login(tcUrl = this.settings.tcUrl, tcUrlWebTierPort = this.settings.tcUrlWebTierPort, tcWebTierAppName = this.settings.tcWebTierAppName, userName = this.settings.userName, userPassword = this.settings.userPassword) {
    this.jsessionId = "";
    const url = `${tcUrl}:${tcUrlWebTierPort}/${tcWebTierAppName}/JsonRestServices/Core-2011-06-Session/login`;
    const payload = {
      header: {
        state: {},
        policy: {}
      },
      body: {
        credentials: {
          user: userName,
          password: userPassword,
          role: "",
          descrimator: "",
          locale: "",
          group: ""
        }
      }
    };
    const requestOptions = {
      url,
      method: "POST",
      contentType: "application/json",
      body: JSON.stringify(payload),
      headers: {
        "Content-Type": "application/json"
      },
      throw: false
    };
    try {
      const response = await (0, import_obsidian.requestUrl)(requestOptions);
      if (!response.json.code) {
        const setCookieHeader = response.headers["set-cookie"];
        if (setCookieHeader) {
          let cookieString = "";
          if (Array.isArray(setCookieHeader)) {
            cookieString = setCookieHeader.join("; ");
          } else {
            cookieString = setCookieHeader;
          }
          const jsessionIdMatch = cookieString.match(/JSESSIONID=([^;]+)/);
          if (jsessionIdMatch) {
            this.jsessionId = jsessionIdMatch[1];
            console.log("Logged in successfully. JSESSIONID:", this.jsessionId);
            return this.jsessionId;
          } else {
            console.error("JSESSIONID not found in Set-Cookie header.");
          }
        } else {
          console.error("Set-Cookie header not found in response.");
        }
      } else {
        console.error("Login failed. Status:", response.status, "Response:", response.text);
        return "500";
      }
    } catch (error) {
      console.error("An error occurred during login:", error);
      return error;
    }
  }
  async loadRevisionRule(tcUrl = this.settings.tcUrl, tcUrlWebTierPort = this.settings.tcUrlWebTierPort, tcWebTierAppName = this.settings.tcWebTierAppName) {
    var _a, _b, _c;
    if (!this.jsessionId) {
      console.error("Not logged in. Please login first.");
      throw new Error("Not logged in");
    }
    const url = `${tcUrl}:${tcUrlWebTierPort}/${tcWebTierAppName}/JsonRestServices/Cad-2007-01-StructureManagement/getRevisionRules`;
    const payload = {
      "header": {
        "state": {
          "formatProperties": true,
          "stateless": true,
          "unloadObjects": false,
          "enableServerStateHeaders": true,
          "locale": "en_US"
        },
        "policy": {
          "types": [
            {
              "name": "RevisionRule",
              "properties": [
                {
                  "name": "object_name"
                }
              ]
            }
          ]
        }
      }
    };
    const requestOptions = {
      url,
      method: "POST",
      contentType: "application/json",
      body: JSON.stringify(payload),
      headers: {
        "Content-Type": "application/json",
        "Cookie": `JSESSIONID=${this.jsessionId}`
      },
      throw: false
    };
    try {
      const response = await (0, import_obsidian.requestUrl)(requestOptions);
      if (response.status === 200) {
        const data = response.json;
        const revisionRules = [];
        const outputArray = data.output;
        const modelObjects = (_a = data.ServiceData) == null ? void 0 : _a.modelObjects;
        if (!Array.isArray(outputArray) || !modelObjects) {
          console.error("Unexpected response format");
          throw new Error("Unexpected response format");
        }
        for (const outputItem of outputArray) {
          const revRuleUid = (_b = outputItem.revRule) == null ? void 0 : _b.uid;
          if (revRuleUid && modelObjects[revRuleUid]) {
            const revRuleObject = modelObjects[revRuleUid];
            const objectNameProps = (_c = revRuleObject.props) == null ? void 0 : _c.object_name;
            const uiValues = objectNameProps == null ? void 0 : objectNameProps.uiValues;
            const name = uiValues && uiValues[0] ? uiValues[0] : "";
            if (name) {
              revisionRules.push({ uid: revRuleUid, name });
            } else {
              console.warn(`No name found for revision rule with UID ${revRuleUid}`);
            }
          } else {
            console.warn(`Revision rule with UID ${revRuleUid} not found in modelObjects`);
          }
        }
        return revisionRules;
      } else {
        console.error("Failed to load revision rules. Status:", response.status, "Response:", response.text);
        throw new Error("Failed to load revision rules");
      }
    } catch (error) {
      console.error("An error occurred while loading revision rules:", error);
      throw error;
    }
  }
  // Future methods will use this.jsessionId for authenticated requests
};

// src/mainWindow.ts
var TeamcenterModal = class extends import_obsidian2.Modal {
  constructor(app, settings) {
    super(app);
    this.revisionRules = [];
    this.selectedRevisionRuleUid = null;
    this.selectedRevisionRule = null;
    this.itemId = "";
    this.settings = settings;
  }
  async onOpen() {
    const { contentEl } = this;
    this.teamcenterApi = new TeamcenterApi(this.settings);
    contentEl.createEl("h2", { text: "Teamcenter Query" });
    let dropdownEventAttached = false;
    new import_obsidian2.Setting(contentEl).setName("Revision Rule").addDropdown((dropdown) => {
      dropdown.addOption("", "Select a revision rule");
      if (!dropdownEventAttached) {
        dropdownEventAttached = true;
        dropdown.selectEl.addEventListener("mousedown", async (event) => {
          if (this.revisionRules.length === 0) {
            event.preventDefault();
            dropdown.addOption("", "Loading...");
            dropdown.setValue("");
            dropdown.selectEl.disabled = true;
            try {
              this.revisionRules = await this.teamcenterApi.loadRevisionRule();
              dropdown.addOption("", "Select a revision rule");
              for (const rule of this.revisionRules) {
                dropdown.addOption(rule.uid, rule.name);
              }
              dropdown.selectEl.disabled = false;
              dropdown.selectEl.click();
            } catch (error) {
              console.error("Failed to load revision rules:", error);
              dropdown.addOption("", "Failed to load revision rules");
              dropdown.setValue("");
              dropdown.selectEl.disabled = false;
            }
          }
        });
      }
      dropdown.onChange((value) => {
        this.selectedRevisionRuleUid = value;
      });
    });
    new import_obsidian2.Setting(contentEl).setName("Item ID").addText((text) => {
      text.setPlaceholder("Enter Item ID").onChange((value) => {
        this.itemId = value;
      });
    });
    new import_obsidian2.Setting(contentEl).addButton((button) => {
      button.setButtonText("Submit").setCta().onClick(async () => {
        await this.teamcenterApi.login();
      });
    });
    new import_obsidian2.Setting(contentEl).addButton((button) => {
      button.setButtonText("Cancel").onClick(() => {
        this.close();
      });
    });
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
  submit() {
    console.log("Selected Revision Rule:", this.selectedRevisionRule);
    console.log("Item ID:", this.itemId);
    this.close();
  }
};

// src/settings.ts
var import_obsidian3 = require("obsidian");
var DEFAULT_SETTINGS = {
  tcUrl: "",
  tcUrlWebTierPort: "7001",
  tcWebTierAppName: "tc",
  userName: "",
  userPassword: "",
  selectedRevisionRuleUid: "",
  selectedRevisionRuleName: ""
};
var TeamcenterIntegratorSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.revisionRules = [];
    this.selectedRevisionRuleUid = null;
    this.selectedRevisionRule = null;
    this.plugin = plugin;
  }
  display() {
    let revisionRuleControl;
    let dropdownEventAttached = false;
    const { containerEl } = this;
    const teamcenterApi = new TeamcenterApi(DEFAULT_SETTINGS);
    containerEl.empty();
    containerEl.createEl("h2", { text: "Teamcenter Integration Settings" });
    new import_obsidian3.Setting(containerEl).setName("TC_URL").setDesc("Base URL of your Teamcenter server.").addText((text) => text.setPlaceholder("Enter TC_URL").setValue(this.plugin.settings.tcUrl).onChange(async (value) => {
      this.plugin.settings.tcUrl = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("TCURL_WEBTIER_APP_NAME").setDesc("Web tier application name (typically: tc).").addText((text) => text.setPlaceholder("Enter TCURL_WEBTIER_APP_NAME").setValue(this.plugin.settings.tcWebTierAppName).onChange(async (value) => {
      this.plugin.settings.tcWebTierAppName = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("TCURL_WEBTIER_PORT").setDesc("Web tier port of your Teamcenter server (typically: 7001).").addText((text) => text.setPlaceholder("Enter TCURL_WEBTIER_PORT").setValue(this.plugin.settings.tcUrlWebTierPort).onChange(async (value) => {
      this.plugin.settings.tcUrlWebTierPort = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("User Name").setDesc("Your Teamcenter username.").addText((text) => text.setPlaceholder("Enter your username").setValue(this.plugin.settings.userName).onChange(async (value) => {
      this.plugin.settings.userName = value.trim();
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Password").setDesc("Your Teamcenter password.").addText((text) => {
      text.setPlaceholder("Enter your password").setDisabled(true).setValue(this.plugin.settings.userPassword).onChange(async (value) => {
        this.plugin.settings.userPassword = value.trim();
        await this.plugin.saveSettings();
      });
    });
    new import_obsidian3.Setting(containerEl).addButton((button) => {
      button.setButtonText("Check Teamcenter login/password").setCta().onClick(async () => {
        try {
          await teamcenterApi.login(
            this.plugin.settings.tcUrl,
            this.plugin.settings.tcUrlWebTierPort,
            this.plugin.settings.tcWebTierAppName,
            this.plugin.settings.userName,
            this.plugin.settings.userPassword
          ).then((loginResult) => {
            console.log("loginResult: " + loginResult);
            if (loginResult !== "500") {
              revisionRuleControl.setDisabled(false);
            }
          });
        } catch (error) {
          revisionRuleControl.setDisabled(true);
        }
      });
    });
    new import_obsidian3.Setting(containerEl).setName("Revision Rule").addDropdown((dropdown) => {
      revisionRuleControl = dropdown;
      if (this.plugin.settings.selectedRevisionRuleName) {
        dropdown.addOption(this.plugin.settings.selectedRevisionRuleUid, this.plugin.settings.selectedRevisionRuleName);
      } else {
        dropdown.addOption("", "Select a revision rule");
      }
      dropdown.setDisabled(true);
      if (this.revisionRules && this.revisionRules.length > 0) {
        populateDropdownWithRevisionRules(dropdown, this.revisionRules);
        if (this.plugin.settings.selectedRevisionRuleUid) {
          dropdown.setValue(this.plugin.settings.selectedRevisionRuleUid);
        }
        dropdown.setDisabled(false);
      } else {
        if (!dropdownEventAttached) {
          dropdownEventAttached = true;
          dropdown.selectEl.addEventListener("mousedown", async (event) => {
            if (!this.revisionRules || this.revisionRules.length === 0) {
              event.preventDefault();
              dropdown.addOption("", "Loading...");
              dropdown.setValue("");
              dropdown.selectEl.disabled = true;
              try {
                this.revisionRules = await teamcenterApi.loadRevisionRule(
                  this.plugin.settings.tcUrl,
                  this.plugin.settings.tcUrlWebTierPort,
                  this.plugin.settings.tcWebTierAppName
                );
                populateDropdownWithRevisionRules(dropdown, this.revisionRules);
                dropdown.selectEl.disabled = false;
                dropdown.selectEl.click();
                if (this.plugin.settings.selectedRevisionRuleUid) {
                  dropdown.setValue(this.plugin.settings.selectedRevisionRuleUid);
                }
              } catch (error) {
                console.error("Failed to load revision rules:", error);
                dropdown.addOption("", "Failed to load revision rules");
                dropdown.setValue("");
                dropdown.selectEl.disabled = false;
              }
            }
          });
        }
      }
      dropdown.onChange(async (value) => {
        this.plugin.settings.selectedRevisionRuleUid = value;
        const selectedRule = this.revisionRules.find((rule) => rule.uid === value);
        this.plugin.settings.selectedRevisionRuleName = selectedRule ? selectedRule.name : "";
        await this.plugin.saveSettings();
      });
    });
    function populateDropdownWithRevisionRules(dropdown, revisionRules) {
      dropdown.selectEl.innerHTML = "";
      dropdown.addOption("", "Select a revision rule");
      for (const rule of revisionRules) {
        dropdown.addOption(rule.uid, rule.name);
      }
    }
  }
};

// main.ts
var TeamcenterIntegratorPlugin = class extends import_obsidian4.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("dice", "Sample Plugin", async (evt) => {
      new import_obsidian4.Notice("This is a notice!");
      new TeamcenterModal(this.app, this.settings).open();
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    this.addSettingTab(new TeamcenterIntegratorSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async buildHierarchy() {
    const folders = [
      "FolderA",
      "FolderA/FolderB",
      "FolderA/FolderB/FolderC"
    ];
    for (const folder of folders) {
      await this.createFolderIfNotExists(folder);
    }
    const notes = [
      {
        path: "FolderA/NoteA.md",
        data: {
          "Name": "Note A",
          "Description": "Description for Note A",
          "Owner": "Alice",
          "Date": "2023-10-14"
        }
      },
      {
        path: "FolderA/FolderB/NoteB.md",
        data: {
          "Name": "Note B",
          "Description": "Description for Note B",
          "Owner": "Bob",
          "Date": "2023-10-15"
        }
      }
    ];
    for (const note of notes) {
      const content = this.generateTable(note.data);
      await this.createNoteIfNotExists(note.path, content);
    }
  }
  async createFolderIfNotExists(folderPath) {
    folderPath = (0, import_obsidian4.normalizePath)(folderPath);
    if (!this.app.vault.getAbstractFileByPath(folderPath)) {
      await this.app.vault.createFolder(folderPath);
    }
  }
  async createNoteIfNotExists(notePath, content) {
    notePath = (0, import_obsidian4.normalizePath)(notePath);
    if (!this.app.vault.getAbstractFileByPath(notePath)) {
      await this.app.vault.create(notePath, content);
    }
  }
  generateTable(data) {
    const headers = "| Field       | Value                |\n|-------------|----------------------|\n";
    let rows = "";
    for (const key in data) {
      rows += `| ${key}        | ${data[key]}          |
`;
    }
    return headers + rows;
  }
};
//# sourceMappingURL=data:application/json;base64,
